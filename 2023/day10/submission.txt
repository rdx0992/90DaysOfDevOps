## Task 1:
 Add a text file called version01.txt inside the Devops/Git/ with “This is first feature of our application” written inside. 
 This should be in a branch coming from `master`, 
 [hint try `git checkout -b dev`], 
 swithch to `dev` branch ( Make sure your commit message will reflect as "Added new feature").
 [Hint use your knowledge of creating branches and Git commit command]

 - version01.txt should reflect at local repo first followed by Remote repo for review.
 [Hint use your knowledge of Git push and git pull commands here] 

 Add new commit in `dev` branch after adding below mentioned content in Devops/Git/version01.txt:
 While writing the file make sure you write these lines
 
 - 1st line>>  This is the bug fix in development branch
 - Commit this with message “ Added feature2 in development branch”
 
 - 2nd line>> This is gadbad code
 - Commit this with message “ Added feature3 in development branch
 
 - 3rd line>> This feature will gadbad everything from now.
 - Commit with message “ Added feature4 in development branch

 Restore the file to a previous version where the content should be “This is the bug fix in development branch”
 [Hint use git revert or reset according to your knowledge]

Ans. Create a branch from the master branch:

git checkout -b dev

Create a new file version01.txt inside the Devops/Git/ directory:

echo "This is first feature of our application" > Devops/Git/version01.txt

Stage the changes and make a commit:

git add Devops/Git/version01.txt
git commit -m "Added new feature"

Push the changes to the remote repository:

git push origin dev

Add the first line of text to the file:

echo "This is the bug fix in development branch" >> Devops/Git/version01.txt

Stage the changes and make a commit:

git add Devops/Git/version01.txt
git commit -m "Added feature2 in development branch"

Add the second line of text to the file:

echo "This is bad code" >> Devops/Git/version01.txt

Stage the changes and make a commit:

git add Devops/Git/version01.txt
git commit -m "Added feature3 in development branch"

Add the third line of text to the file:

echo "This feature will break everything from now." >> Devops/Git/version01.txt

Stage the changes and make a commit:

git add Devops/Git/version01.txt
git commit -m "Added feature4 in development branch"

To restore the file to the previous version, you can use either git revert or git reset:

git revert HEAD~3

Push the changes to the remote repository:

git push origin dev

## Task 2:

 - Demonstrate the concept of branches with 2 or more branches with screenshot.
 - add some changes to `dev` branch and merge that branch in `master`
 - as a practice try git rebase too, see what difference you get.
 Ans. Git rebase is a command used to reapply commits from one branch onto another branch. It can be used to make a linear history of changes, which makes it easier to read and understand.

Steps to demonstrate Git rebase:

Checkout the dev branch using the command:

git checkout dev

Rebase the dev branch onto the master branch using the command:

git rebase master

Push the changes to the remote repository using the command:

git push origin dev